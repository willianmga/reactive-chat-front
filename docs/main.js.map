{"version":3,"sources":["./src/app/chat-mobile/chat-mobile.component.ts","./src/app/chat-mobile/chat-mobile.component.html","./src/app/service/login.service.ts","./src/app/service/notification.service.ts","./src/app/service/loggedIn-guard.service.ts","./src/app/service/signup.service.ts","./src/environments/environment.ts","./src/app/service/contact.service.ts","./src/app/system-info/system-info.component.ts","./src/app/system-info/system-info.component.html","./src/app/service/chat-message.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/service/auth-guard.service.ts","./src/app/app.module.ts","./src/app/service/session.service.ts","./src/app/signup/signup.component.ts","./src/app/signup/signup.component.html","./src/app/app-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/chat-web-socket.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import {Component, ElementRef, HostListener, OnInit, ViewChild} from '@angular/core';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {\n  ChatConnectionStatus,\n  ChatHistoryResponse,\n  ChatMessage,\n  ChatWebSocketService,\n  Contact,\n  DestinationType,\n  MOBILE_MAX_WIDTH,\n  SessionDetails\n} from '../chat-web-socket.service';\nimport {Howl} from 'howler';\nimport {ContactService} from '../service/contact.service';\nimport {ChatMessageService} from '../service/chat-message.service';\nimport {SessionService} from '../service/session.service';\n\n@Component({\n  selector: 'app-chat-mobile',\n  templateUrl: './chat-mobile.component.html',\n  styleUrls: ['./chat-mobile.component.css']\n})\nexport class ChatMobileComponent implements OnInit {\n\n  connectionStatus: ChatConnectionStatus;\n  mobileMode: boolean;\n  dataLoadFinished: boolean;\n  needsDataReload = false;\n  listMode: boolean;\n  sessionDetails: SessionDetails;\n  selectedContact: Contact;\n  contacts: Array<Contact> = [];\n  private player: Howl;\n\n  @ViewChild('messageinput') messageinput;\n  @ViewChild('chatHistoryContainer') private chatHistoryContainer: ElementRef;\n\n  constructor(private chatService: ChatWebSocketService,\n              private sessionService: SessionService,\n              private contactService: ContactService,\n              private chatMessageService: ChatMessageService,\n              private _snackBar: MatSnackBar) {\n    this.dataLoadFinished = false;\n    this.listMode = true;\n    this.player = new Howl({\n      src: ['assets/notification.mp3']\n    });\n  }\n\n  ngOnInit(): void {\n    this.checkMobileMode();\n    setTimeout(() => {\n      this.loadChatData();\n    }, 5000);\n\n  }\n\n  ngAfterViewChecked(): void {\n    this.scrollToBottom();\n  }\n\n  private loadChatData(): void {\n\n    this.chatService\n      .openConnection()\n      .subscribe(() => {\n\n        this.chatService\n          .getConnectionStatusSubject()\n          .subscribe(status => {\n            this.connectionStatus = status;\n            this.dataLoadFinished = true;\n\n            if (this.connectionStatus === ChatConnectionStatus.ONLINE && this.needsDataReload) {\n              this.needsDataReload = false;\n              this.loadChatData();\n            } else if (this.connectionStatus === ChatConnectionStatus.OFFLINE) {\n              this.needsDataReload = true;\n            }\n          });\n\n        this.sessionService\n          .getSessionDetailsObservable()\n          .subscribe((sessionDetails) => {\n            this.sessionDetails = sessionDetails;\n          });\n\n        this.contactService\n          .requestContacts()\n          .subscribe((response) => {\n            this.contacts = response;\n          });\n\n        this.contactService\n          .newContactObservable()\n          .subscribe(newContact => {\n            this.contacts.push(newContact);\n          });\n\n        this.chatMessageService\n          .getMessagesObservable()\n          .subscribe((message) => {\n            this.notifyReceivedMessage(message);\n          });\n\n        this.chatMessageService\n          .getChatHistoryObservable()\n          .subscribe(chatHistoryResponse => {\n            this.notifyReceivedChatHistory(chatHistoryResponse);\n          });\n\n      });\n\n  }\n\n  @HostListener('window:resize', ['$event'])\n  onResize(event): void {\n    this.checkMobileMode();\n  }\n\n  notifyReceivedChatHistory(chatHistory: ChatHistoryResponse): void {\n    this.mergeChatHistoryToHistory(\n      () => this.findContact(chatHistory.destinationId),\n      chatHistory\n    );\n  }\n\n  notifyReceivedMessage(message: ChatMessage): void {\n    this.addMessageToHistory(\n      () => this.findMessageDestinationContact(message),\n      message\n    );\n    this.player.play();\n  }\n\n  notifySentMessage(message: ChatMessage): void {\n    this.addMessageToHistory(\n      () => this.findContact(message.destinationId),\n      message\n    );\n  }\n\n  findMessageDestinationContact(message: ChatMessage): Contact {\n    return (message.destinationType === DestinationType.USER)\n      ? this.findContact(message.from)\n      : this.findContact(message.destinationId);\n  }\n\n  findMessageSenderContact(message: ChatMessage): Contact {\n    return (message.from === this.sessionDetails?.loggedInUser?.id)\n      ? this.findContact(this.sessionDetails?.loggedInUser?.id)\n      : this.findContact(message?.from);\n  }\n\n  findContact(contactId: string): Contact {\n    return this.contacts.filter(contact => contact.id === contactId)[0];\n  }\n\n  addMessageToHistory(findDestinationContactFunction: any, message: ChatMessage): void {\n    const destinationContact: Contact = findDestinationContactFunction();\n    destinationContact.chatHistory.push(message);\n  }\n\n  mergeChatHistoryToHistory(findDestinationContactFunction: any, chatHistoryResponse: ChatHistoryResponse): void {\n    const destinationContact: Contact = findDestinationContactFunction();\n\n    const newMessages: Array<ChatMessage> = chatHistoryResponse\n      .chatHistory\n      .filter(chatMessage => destinationContact.chatHistory\n        .filter(message => message.id === chatMessage.id).length === 0\n      );\n\n    const existingMessages: Array<ChatMessage> = newMessages.concat(destinationContact.chatHistory);\n    destinationContact.chatHistory = this.sortChatMessageByDate(existingMessages);\n  }\n\n  private sortChatMessageByDate(existingMessages: Array<ChatMessage>): Array<ChatMessage> {\n    return existingMessages.sort((m1, m2) => {\n      if (m1.date > m2.date) {\n        return 1;\n      } else if (m1.date < m2.date) {\n        return -1;\n      }\n      return 0;\n    });\n  }\n\n  /* View Methods  */\n\n  sendMessage(message: string): void {\n    if (message !== undefined && message.trim() !== '') {\n      this.chatMessageService\n        .sendMessage(message, this.selectedContact)\n        .subscribe(requestMessage => {\n          this.notifySentMessage(requestMessage.payload);\n          this.messageinput.nativeElement.value = '';\n          this.messageinput.nativeElement.focus();\n        }, error => {\n          this._snackBar.open('You are offline. Your message was not sent.', 'ok', {\n            duration: 3000,\n            verticalPosition: 'top'\n          });\n        });\n    }\n  }\n\n  openContact(contact: Contact): void {\n    if (!contact.chatHistoryLoaded) {\n      contact.chatHistoryLoaded = true;\n      this.chatMessageService.requestChatHistory(contact);\n    }\n    this.selectContact(contact);\n    this.listMode = false;\n  }\n\n  selectContact(contact: Contact): void {\n    this.selectedContact = contact;\n  }\n\n  closeContact(): void {\n    this.listMode = true;\n  }\n\n  isReceivedMessage(message: ChatMessage): boolean {\n    return message.from !== this.sessionDetails?.loggedInUser?.id;\n  }\n\n  isGroupMessage(message: ChatMessage): boolean {\n    return message.destinationType !== DestinationType.USER;\n  }\n\n  getSenderName(message: ChatMessage): string {\n\n    const senderContact: Contact = this.findMessageSenderContact(message);\n\n    return (senderContact !== undefined)\n      ? senderContact.name\n      : (message?.from === this.sessionDetails?.loggedInUser?.id)\n        ? this.sessionDetails?.loggedInUser?.name\n        : '';\n\n  }\n\n  getSenderAvatar(message: ChatMessage): string {\n\n    const senderContact: Contact = this.findMessageSenderContact(message);\n\n    return (senderContact !== undefined)\n      ? senderContact?.avatar\n      : (message.from === this.sessionDetails?.loggedInUser?.id)\n        ? this.sessionDetails?.loggedInUser?.avatar\n        : '';\n\n  }\n\n  // TODO: find proper last message received\n  getLastReceivedMessage(contact: Contact): string {\n    return contact.chatHistory[contact.chatHistory.length - 1]?.content;\n  }\n\n  // TODO: find whether there's unread message properly\n  hasUnreadMessage(contact: Contact): boolean {\n    return contact.chatHistory.length > 0;\n  }\n\n  showContactsList(): boolean {\n    return (this.mobileMode)\n      ? this.listMode\n      : true;\n  }\n\n  showMessageHistory(): boolean {\n    return (this.mobileMode)\n      ? !this.listMode\n      : this.selectedContact !== undefined;\n  }\n\n  loadIsFinished(): boolean {\n    return (this.connectionStatus === ChatConnectionStatus.ONLINE)\n      ? this.dataLoadFinished\n      : true;\n  }\n\n  connectionStatusLabelColor(): string {\n    switch (this.connectionStatus) {\n      case ChatConnectionStatus.ONLINE:\n        return 'green';\n      case ChatConnectionStatus.OFFLINE:\n        return 'red';\n      default:\n        return 'white';\n    }\n  }\n\n  private scrollToBottom(): void {\n    try {\n      this.chatHistoryContainer.nativeElement.scrollTop = this.chatHistoryContainer.nativeElement.scrollHeight;\n    } catch (err) {}\n  }\n\n  private checkMobileMode(): void {\n    this.mobileMode = window.innerWidth <= MOBILE_MAX_WIDTH;\n  }\n\n}\n","<section *ngIf=\"!loadIsFinished()\">\n  <p>\n    <mat-spinner [diameter]=\"60\" style=\"margin: 50px auto;\"></mat-spinner>\n  </p>\n</section>\n\n<section class=\"main-container\" *ngIf=\"loadIsFinished()\">\n\n  <!-- Contacts Area -->\n  <div class=\"contacts-area\" *ngIf=\"showContactsList()\" >\n\n    <!-- Current User Details -->\n    <mat-card *ngIf=\"!mobileMode\" class=\"user-contact-card\">\n      <mat-card-header>\n        <img mat-card-avatar src=\"{{sessionDetails?.loggedInUser?.avatar}}\"/>\n        <mat-card-title>{{sessionDetails?.loggedInUser?.name}}</mat-card-title>\n        <mat-card-subtitle [style.color]=\"connectionStatusLabelColor()\" >{{ connectionStatus }}</mat-card-subtitle>\n      </mat-card-header>\n    </mat-card>\n\n    <!-- Lateral Contact List Area: Mobile Mode -->\n    <mat-selection-list [multiple]=\"false\" *ngIf=\"mobileMode\">\n      <mat-list-option class=\"contact-option\" *ngFor=\"let contact of contacts\" (click)=\"openContact(contact)\">\n        <img mat-list-avatar src=\"{{contact?.avatar}}\"/>\n        <span style=\"font-weight: bold\">{{contact.name}}</span>\n        <p style=\"font-size: x-small\" *ngIf=\"!hasUnreadMessage(contact)\">{{contact.description}}</p>\n        <p style=\"font-size: x-small; font-weight: bold\" *ngIf=\"hasUnreadMessage(contact)\">{{ getLastReceivedMessage(contact) }}</p>\n        <mat-divider></mat-divider>\n      </mat-list-option>\n    </mat-selection-list>\n\n    <!-- Lateral Contact List Area: Desktop/Tablet Mode -->\n    <mat-selection-list class=\"contact-list\" [multiple]=\"false\"  *ngIf=\"!mobileMode\">\n      <mat-list-option *ngFor=\"let contact of contacts\" (click)=\"openContact(contact)\">\n        {{contact.name}}\n      </mat-list-option>\n    </mat-selection-list>\n\n  </div>\n\n  <!-- Chat History Area -->\n  <div class=\"chat-history-area\">\n\n    <section class=\"select-contact-container\" *ngIf=\"!showMessageHistory()\">\n      <section class=\"contact-details-container\">\n        <mat-card class=\"contact-card\">\n        </mat-card>\n      </section>\n    </section>\n\n    <!-- Selected Contact Details Area -->\n    <section class=\"chat-history-container\" *ngIf=\"showMessageHistory()\">\n      <section class=\"contact-details-container\">\n        <mat-card class=\"contact-card\">\n          <mat-card-header>\n            <img mat-card-avatar src=\"{{selectedContact?.avatar}}\"/>\n            <mat-card-title>{{selectedContact?.name}}</mat-card-title>\n            <mat-card-subtitle>{{selectedContact?.description}}</mat-card-subtitle>\n            <!-- TODO: move button to the right -->\n            <button mat-icon-button class=\"mediumIcon\"  *ngIf=\"mobileMode\" (click)=\"closeContact()\">\n              <mat-icon [inline]=\"true\">keyboard_return</mat-icon>\n            </button>\n          </mat-card-header>\n        </mat-card>\n      </section>\n\n      <!-- Chat History -->\n      <section #chatHistoryContainer class=\"message-history-container\">\n\n        <div class=\"message-container\" *ngFor=\"let chatMessage of selectedContact?.chatHistory\">\n          <div class=\"image\">\n            <img alt=\"{{ getSenderName(chatMessage) }}\" src=\"{{ getSenderAvatar(chatMessage) }}\">\n          </div>\n          <div class=\"title\">{{ getSenderName(chatMessage) }}</div>\n          <div class=\"subtitle\">{{ chatMessage?.date | date }}</div>\n          <div class=\"content\">\n            <span>{{chatMessage.content}}</span>\n          </div>\n        </div>\n\n      </section>\n\n      <!-- Message Typing area -->\n      <section class=\"type-message-container\">\n        <div class=\"message-type-area\">\n\n          <mat-form-field appearance=\"fill\" style=\"width: 100%; background-color: grey;\">\n            <mat-label>Start typing</mat-label>\n            <input #messageinput matInput (keyup.enter)=\"sendMessage(messageinput.value)\" placeholder=\"Type your message\">\n            <button mat-icon-button matSuffix (click)=\"sendMessage(messageinput.value)\" [attr.aria-label]=\"'Send'\">\n              <mat-icon>send</mat-icon>\n            </button>\n          </mat-form-field>\n\n        </div>\n      </section>\n\n    </section>\n\n  </div>\n\n</section>\n","import {Injectable} from '@angular/core';\nimport {LoginRequest, LoginResponse} from '../chat-web-socket.service';\nimport {Observable} from 'rxjs';\nimport {HttpClient} from '@angular/common/http';\nimport {environment} from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor(private httpClient: HttpClient) {}\n\n  login(loginRequest: LoginRequest): Observable<LoginResponse> {\n    return this.httpClient\n      .post<LoginResponse>(`${environment.authServiceUrl}/v1/auth`, loginRequest);\n  }\n\n  test(): Observable<any> {\n    return this.httpClient\n      .get<any>(`${environment.authServiceUrl}/v1/auth`);\n  }\n\n  getIp(): Observable<any> {\n    return this.httpClient.get('http://api.ipify.org/?format=json');\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {ChatMessage, Contact} from '../chat-web-socket.service';\nimport {Observable, Subject} from 'rxjs';\n\nexport enum NotificationType {\n  NEW_MESSAGE = 'NEW_MESSAGE',\n  NEW_CONTACT = 'NEW_CONTACT'\n}\n\nexport interface Notification {\n  referenceId: string;\n  message: string;\n  avatar?: string;\n  read: boolean;\n  type: NotificationType;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  private notificationsSubject: Subject<Notification>;\n\n  constructor() {\n    this.notificationsSubject = new Subject<Notification>();\n  }\n\n  newContact(contact: Contact): void {\n    this.notificationsSubject\n      .next({\n        referenceId: contact.id,\n        message: `${contact.name} has joined SocialChat!`,\n        avatar: contact.avatar,\n        type: NotificationType.NEW_CONTACT,\n        read: false\n      });\n  }\n\n  newMessage(message: ChatMessage): void {\n    this.notificationsSubject\n      .next({\n        referenceId: message.id,\n        message: `New Message: ${message.content}`,\n        type: NotificationType.NEW_MESSAGE,\n        read: false\n      });\n  }\n\n  getNotificationsSubject(): Observable<Notification> {\n    return this.notificationsSubject;\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {SessionService} from './session.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggedInGuardService implements CanActivate {\n\n  constructor(private router: Router,\n              private sessionService: SessionService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return new Observable<boolean>(observer => {\n      if (this.sessionService.isLoggedIn()) {\n        this.router.navigateByUrl('/chat');\n        observer.next(false);\n      } else {\n        observer.next(true);\n      }\n      observer.complete();\n    });\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {ChatWebSocketService, MessageType, SignupResponse} from '../chat-web-socket.service';\nimport {Observable, Subject} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignupService {\n\n  private signupSubject: Subject<SignupResponse> = new Subject();\n\n  constructor(private chatService: ChatWebSocketService) {\n    this.subscribe();\n  }\n\n  private subscribe(): void {\n    this.chatService\n      .getWebSocketObservable()\n      .subscribe(responseMessage => {\n        const messagePayload = responseMessage.payload;\n        if (responseMessage.type === MessageType.SIGNUP) {\n          this.signupSubject.next(messagePayload);\n        }\n      });\n  }\n\n  signup(name: string, username: string, password: string): Observable<SignupResponse> {\n\n    this.chatService\n      .sendWebSocketMessage({\n        type: MessageType.SIGNUP,\n        payload: {\n          name,\n          username,\n          password\n        }\n    });\n\n    return this.signupSubject;\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  backendUrl: 'wss://127.0.0.1:8080/chat',\n  authServiceUrl: 'https://127.0.0.1:8081'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {ChatWebSocketService, Contact, MessageType, RequestMessage} from '../chat-web-socket.service';\nimport {SessionService} from './session.service';\nimport {NotificationService} from './notification.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n\n  private contactsSubject: Subject<Array<Contact>> = new Subject<Array<Contact>>();\n  private newContactSubject: Subject<Contact> = new Subject<Contact>();\n\n  constructor(private chatService: ChatWebSocketService,\n              private sessionService: SessionService,\n              private notificationService: NotificationService) {\n    this.subscribe();\n  }\n\n  subscribe(): void {\n    this.chatService\n      .getWebSocketObservable()\n      .subscribe(responseMessage => {\n        const messagePayload = responseMessage.payload;\n        if (responseMessage.type === MessageType.CONTACTS_LIST) {\n          this.contactsSubject.next(this.formatContacts(messagePayload));\n        } else if (responseMessage.type === MessageType.NEW_CONTACT_REGISTERED) {\n          const contact = this.formatContact(messagePayload);\n          this.notificationService.newContact(contact);\n          this.newContactSubject.next(contact);\n        }\n      });\n  }\n\n  requestContacts(): Observable<Array<Contact>> {\n    this.chatService\n      .sendWebSocketMessage({\n        type: MessageType.CONTACTS_LIST,\n        token: this.sessionService.getToken()\n      });\n    return this.contactsSubject;\n  }\n\n  newContactObservable(): Observable<Contact> {\n    return this.newContactSubject;\n  }\n\n  private formatContacts(contacts: Array<Contact>): Array<Contact> {\n    return contacts\n      .map(contact => this.formatContact(contact));\n  }\n\n  private formatContact(contact: Contact): Contact {\n    contact.chatHistory = [];\n    contact.chatHistoryLoaded = false;\n\n    try {\n\n      const splitName = contact.name.split(' ');\n      contact.name = (splitName.length > 1)\n        ? `${this.capitalize(splitName[0])} ${this.capitalize(splitName[splitName.length - 1])}`\n        : `${this.capitalize(splitName[0])}`;\n      return contact;\n\n    } catch (e) {\n      return contact;\n    }\n  }\n\n  private capitalize(data: string): string {\n    return data.charAt(0).toUpperCase() + data.slice(1);\n  }\n\n}\n","import { Component } from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport * as packageJson from '../../../package.json';\n\ninterface Contributor {\n  name: string;\n  url: string;\n  email: string;\n}\n\n@Component({\n  selector: 'app-system-info',\n  templateUrl: './system-info.component.html',\n  styleUrls: ['./system-info.component.css']\n})\nexport class SystemInfoComponent {\n\n  repoName: string;\n  description: string;\n  version: string;\n  repositoryUrl: string;\n  contributors: Array<Contributor>;\n\n  constructor(public dialogRef: MatDialogRef<SystemInfoComponent>) {\n    this.repoName = packageJson.name;\n    this.description = packageJson.description;\n    this.version = packageJson.version;\n    this.repositoryUrl = packageJson.repository.url;\n    this.contributors = packageJson.contributors;\n  }\n\n  close(): void {\n    this.dialogRef.close();\n  }\n\n}\n","<mat-card style=\"background-color: white; color: black\">\n\n  <mat-card-content>\n\n    <img mat-card-image src=\"assets/logo.png\">\n\n    <h1 style=\"text-align: center\">SocialChat</h1>\n    <p style=\"text-align: center\">{{description}}</p>\n\n    <div class=\"container\">\n      <div class=\"developers-container\">\n        <h3>Developers</h3>\n        <ul>\n          <li *ngFor=\"let contributor of contributors\">\n            {{contributor.name}}\n            (<a href=\"{{contributor.url}}\" target=\"_blank\">page</a>)\n            (<a href=\"mailto:{{contributor.email}}\" target=\"_blank\">contact</a>)\n          </li>\n        </ul>\n      </div>\n      <div class=\"repository-container\">\n        <h3>Repositories</h3>\n        <ul>\n          <li>\n            <a href=\"{{repositoryUrl}}\" target=\"_blank\">{{repoName}}</a>\n          </li>\n          <li>\n            <a href=\"https://github.com/willianmga/reactive-chat-back\" target=\"_blank\">reactive-chat-back</a>\n          </li>\n        </ul>\n\n      </div>\n      <div class=\"version-container\">\n        <h3>Version</h3>\n        <ul>\n          <li>Front-end: {{version}}</li>\n          <li>Back-end: 1.0.0</li>\n        </ul>\n\n      </div>\n    </div>\n\n  </mat-card-content>\n  <mat-card-footer>\n    <p style=\"text-align: right; margin: 20px\">\n      <button mat-raised-button color=\"primary\" (click)=\"close()\">Close</button>\n    </p>\n\n  </mat-card-footer>\n</mat-card>\n\n\n","import { Injectable } from '@angular/core';\nimport {\n  ChatHistoryRequest,\n  ChatHistoryResponse,\n  ChatMessage,\n  ChatWebSocketService,\n  Contact,\n  ContactType,\n  DestinationType,\n  MessageType, MimeType,\n  RequestMessage\n} from '../chat-web-socket.service';\nimport {Observable, Subject} from 'rxjs';\nimport {SessionService} from './session.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatMessageService {\n\n  private messagesSubject: Subject<ChatMessage> = new Subject<ChatMessage>();\n  private chatHistorySubject: Subject<ChatHistoryResponse> = new Subject<ChatHistoryResponse>();\n\n  constructor(private chatService: ChatWebSocketService,\n              private sessionService: SessionService) {\n    this.subscribe();\n  }\n\n  private subscribe(): void {\n    this.chatService\n      .getWebSocketObservable()\n      .subscribe(responseMessage => {\n        const messagePayload = responseMessage.payload;\n        if (responseMessage.type === MessageType.USER_MESSAGE) {\n          this.messagesSubject.next(messagePayload);\n        } else if (responseMessage.type === MessageType.CHAT_HISTORY) {\n          this.chatHistorySubject.next(messagePayload);\n        }\n      });\n  }\n\n  sendMessage(message: string, destinationContact: Contact): Observable<RequestMessage> {\n\n    const destinationType = (destinationContact.contactType === ContactType.USER)\n      ? DestinationType.USER\n      : DestinationType.ALL_USERS_GROUP;\n\n    const session = this.sessionService\n      .getSessionDetails();\n\n    const chatMessage: ChatMessage = {\n      from: session.loggedInUser.id,\n      destinationType,\n      destinationId: destinationContact.id,\n      content: message,\n      mimeType: MimeType.TEXT,\n      date: new Date()\n    };\n\n    const newMessage: RequestMessage = {\n      type: MessageType.USER_MESSAGE,\n      token: session.token,\n      payload: chatMessage\n    };\n\n    return this.chatService\n      .sendWebsocketMessage(newMessage);\n  }\n\n  requestChatHistory(destinationContact: Contact): void {\n\n    const chatHistoryRequest: ChatHistoryRequest = {\n      destinationId: destinationContact.id\n    };\n\n    if (destinationContact.chatHistory.length > 0) {\n      chatHistoryRequest.lastMessageId = destinationContact?.chatHistory[0]?.id;\n    }\n\n    const request: RequestMessage = {\n      type: MessageType.CHAT_HISTORY,\n      token: this.sessionService.getToken(),\n      payload: chatHistoryRequest\n    };\n\n    this.chatService\n      .sendWebSocketMessage(request);\n  }\n\n  getMessagesObservable(): Observable<ChatMessage> {\n    return this.messagesSubject;\n  }\n\n  getChatHistoryObservable(): Observable<ChatHistoryResponse> {\n    return this.chatHistorySubject;\n  }\n\n}\n","import {Component} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {MatDialog} from '@angular/material/dialog';\nimport {ChatWebSocketService, SessionDetails} from './chat-web-socket.service';\nimport {SystemInfoComponent} from './system-info/system-info.component';\nimport {SessionService} from './service/session.service';\nimport {NotificationService, Notification} from './service/notification.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  title = 'SocialChat';\n  sessionDetails: SessionDetails;\n  notifications: Array<Notification> = [];\n\n  constructor(private router: Router,\n              private chatService: ChatWebSocketService,\n              private sessionService: SessionService,\n              private notificationService: NotificationService,\n              private systemInfoDialog: MatDialog) {\n    this.loadData();\n  }\n\n  loadData(): void {\n    this.sessionService\n      .getSessionDetailsObservable()\n      .subscribe(sessionDetails => {\n        this.sessionDetails = sessionDetails;\n      });\n\n    this.notificationService\n      .getNotificationsSubject()\n      .subscribe(newNotification => {\n        const unreadNotifications = this.notifications\n          .filter(notification => !notification.read);\n        unreadNotifications.push(newNotification);\n        this.notifications = unreadNotifications;\n      });\n  }\n\n  logout(): void {\n    this.sessionService.logoff();\n    this.router.navigate(['/login']);\n  }\n\n  showSystemInfo(): void {\n    this.systemInfoDialog.open(SystemInfoComponent);\n  }\n\n  isLoggedIn(): boolean {\n    return this.sessionDetails?.loggedIn;\n  }\n\n  hasUnreadNotifications(): boolean {\n    return this.notifications\n      .filter(notification => !notification.read)\n      .length > 0;\n  }\n\n}\n","<div class=\"container\">\n  <header>\n    <!-- Toolbar Section -->\n    <mat-toolbar style=\"background-color: #400d40\">\n      <span>{{title}}</span>\n      <span class=\"spacer\"></span>\n\n      <div *ngIf=\"isLoggedIn()\">\n        <!-- Notifications Button -->\n        <button mat-icon-button [matMenuTriggerFor]=\"notification\" style=\"margin-right: 10px;\">\n          <mat-icon [inline]=\"true\" style=\"font-size: 30px;\" *ngIf=\"hasUnreadNotifications()\">notifications_active</mat-icon>\n          <mat-icon [inline]=\"true\" style=\"font-size: 30px;\" *ngIf=\"!hasUnreadNotifications()\">notifications_none</mat-icon>\n        </button>\n        <mat-menu #notification=\"matMenu\">\n          <span mat-menu-item *ngFor=\"let notification of notifications\">{{ notification.message }}</span>\n        </mat-menu>\n\n        <!-- Switch User Button -->\n        <button mat-icon-button  [matMenuTriggerFor]=\"menu\">\n          <mat-icon [inline]=\"true\" style=\"font-size: 30px;\">account_circle</mat-icon>\n          <!-- TODO: fix image <img mat-card-avatar src=\"{{ sessionDetails?.loggedInUser?.avatar }}\"/> -->\n        </button>\n        <mat-menu #menu=\"matMenu\">\n          <span mat-menu-item>Logged as: {{sessionDetails?.loggedInUser?.name}}</span>\n          <span mat-menu-item (click)=\"showSystemInfo()\">System info</span>\n          <span mat-menu-item (click)=\"logout()\">Logout</span>\n        </mat-menu>\n      </div>\n\n    </mat-toolbar>\n  </header>\n  <main>\n    <router-outlet></router-outlet>\n  </main>\n</div>\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {SessionService} from './session.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardService implements CanActivate {\n\n  constructor(private router: Router,\n              private sessionService: SessionService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return new Observable<boolean>(observer => {\n      if (!this.sessionService.isLoggedIn()) {\n        this.router.navigateByUrl('/login');\n        observer.next(false);\n      } else {\n        observer.next(true);\n      }\n      observer.complete();\n    });\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { SystemInfoComponent } from './system-info/system-info.component';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ChatMobileComponent } from './chat-mobile/chat-mobile.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    SignupComponent,\n    SystemInfoComponent,\n    ChatMobileComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    MatSliderModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatListModule,\n    AppRoutingModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    MatGridListModule,\n    MatTableModule,\n    MatMenuModule,\n    MatDialogModule,\n    MatProgressSpinnerModule,\n    MatSnackBarModule,\n    ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {ChatWebSocketService, MessageType, RequestMessage, SessionDetails} from '../chat-web-socket.service';\nimport {Router} from '@angular/router';\n\nconst loggedOffSessionDetails: SessionDetails = {\n  loggedIn: false,\n  token: undefined,\n  loggedInUser: undefined\n};\n\nconst logoffMessage: RequestMessage = {\n  type: MessageType.LOGOFF\n};\n\nconst SESSION_KEY = 'session';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionService {\n\n  private sessionDetailsSubject: BehaviorSubject<SessionDetails>;\n  private sessionDetails: SessionDetails;\n  private localStorage: Storage;\n\n  constructor(private router: Router,\n              private chatService: ChatWebSocketService) {\n    this.sessionDetailsSubject = new BehaviorSubject<SessionDetails>(loggedOffSessionDetails);\n    this.localStorage = window.localStorage;\n    this.subscribe();\n    this.openSession();\n  }\n\n  subscribe(): void {\n    this.chatService\n      .getWebSocketObservable()\n      .subscribe(responseMessage => {\n        if (responseMessage.type === MessageType.NOT_AUTHENTICATED) {\n          this.unauthorizedOrClosed();\n        }\n      });\n  }\n\n  openSession(): void {\n    this.sessionDetailsSubject.next(this.sessionDetails);\n    this.loadFromLocalStorage();\n  }\n\n  registerSession(session: SessionDetails): void {\n    this.sessionDetails = session;\n    this.localStorage.setItem(SESSION_KEY, JSON.stringify(this.sessionDetails)); // TODO: don't save session details on local storage\n    this.sessionDetailsSubject.next(this.sessionDetails);\n  }\n\n  logoff(): void {\n    this.deregisterSession();\n    this.chatService.resetConnection();\n  }\n\n  getToken(): string {\n    return this.sessionDetails?.token;\n  }\n\n  getSessionDetails(): SessionDetails {\n    return this.sessionDetails;\n  }\n\n  isLoggedIn(): boolean {\n    return this.sessionDetails?.loggedIn;\n  }\n\n  getSessionDetailsObservable(): Observable<SessionDetails> {\n    return this.sessionDetailsSubject;\n  }\n\n  private loadFromLocalStorage(): void {\n    const sessionJson: string = this.localStorage.getItem(SESSION_KEY);\n    this.sessionDetails = (sessionJson !== undefined)\n      ? JSON.parse(sessionJson)\n      : loggedOffSessionDetails;\n    this.sessionDetailsSubject.next(this.sessionDetails);\n  }\n\n  private deregisterSession(): void {\n    this.chatService.sendWebSocketMessage(logoffMessage);\n    this.sessionDetails = loggedOffSessionDetails;\n    this.localStorage.removeItem(SESSION_KEY);\n    this.sessionDetailsSubject.next(this.sessionDetails);\n    this.chatService.closeWebsocketConnection();\n    this.chatService.openWebSocketConnection();\n  }\n\n  private unauthorizedOrClosed(): void {\n    this.deregisterSession();\n    this.router.navigate(['/login']);\n  }\n\n}\n","import {Component, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {ResponseStatus, SessionDetails} from '../chat-web-socket.service';\nimport {SignupService} from '../service/signup.service';\nimport {SessionService} from '../service/session.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n\n  hide = true;\n  signingUp = false;\n  error = false;\n  errorMessage?: string;\n\n  constructor(private router: Router,\n              private signUpService: SignupService,\n              private sessionService: SessionService) { }\n\n  ngOnInit(): void {\n  }\n\n  signup(name: string, username: string, password: string): void {\n\n    this.signingUp = true;\n    this.error = false;\n\n    this.signUpService\n      .signup(name, username, password)\n      .subscribe((signupResponse) => {\n\n        if (signupResponse.status === ResponseStatus.SUCCESS) {\n\n          const sessionDetails: SessionDetails = {\n            loggedIn: true,\n            token: signupResponse.token,\n            loggedInUser: signupResponse.user\n          };\n\n          this.sessionService.registerSession(sessionDetails);\n          this.router.navigate(['/chat']);\n\n        } else {\n          this.signingUp = false;\n          this.errorMessage = this.getErrorMessage(signupResponse.status);\n          this.error = true;\n        }\n\n      });\n\n  }\n\n  login(): void {\n    this.router.navigate(['/login']);\n  }\n\n  private getErrorMessage(status: ResponseStatus): string {\n    switch (status) {\n      case ResponseStatus.USERNAME_IN_USE:\n        return 'Error: This username is already in use';\n      case ResponseStatus.INVALID_NAME:\n        return 'Error: Invalid name';\n      case ResponseStatus.INVALID_USERNAME:\n        return 'Error: Invalid username';\n      case ResponseStatus.INVALID_PASSWORD:\n        return 'Error: Invalid password';\n      default:\n        return 'Sorry, it\\'s us. Try again..';\n    }\n  }\n\n}\n","<mat-card *ngIf=\"signingUp\" class=\"card\">\n  <mat-card-content>\n    <p style=\"text-align: center\">Signing you up</p>\n    <p>\n      <mat-spinner style=\"margin: auto\"></mat-spinner>\n    </p>\n  </mat-card-content>\n</mat-card>\n\n<mat-card *ngIf=\"!signingUp\" class=\"card\">\n\n  <p style=\"text-align: center;\">Create your account now, it's easy!</p>\n\n  <div *ngIf=\"error\" class=\"errorMessageBox\">\n    <p>{{errorMessage}}</p>\n  </div>\n\n  <mat-card-content>\n\n    <p>\n      <mat-form-field appearance=\"fill\" style=\"width: 100%;\">\n        <mat-label>Your Name</mat-label>\n        <input #nameInput matInput  placeholder=\"Type your name\">\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" style=\"width: 100%;\">\n        <mat-label>Username</mat-label>\n        <input #usernameInput matInput placeholder=\"Type your username\">\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\" style=\"width: 100%;\">\n        <mat-label>Password</mat-label>\n        <input #passwordInput matInput [type]=\"hide ? 'password' : 'text'\" placeholder=\"Type your password\">\n        <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\n          <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n        </button>\n      </mat-form-field>\n    </p>\n\n  </mat-card-content>\n  <mat-card-footer>\n    <p>\n      <button mat-raised-button color=\"primary\" (click)=\"signup(nameInput.value, usernameInput.value, passwordInput.value)\" style=\"margin-left: 20px;\">\n        Create Account\n      </button>\n      <button mat-raised-button color=\"accent\" (click)=\"login()\" style=\"margin-left: 20px;\">\n        Login\n      </button>\n    </p>\n  </mat-card-footer>\n</mat-card>\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {LoginComponent} from './login/login.component';\nimport {SignupComponent} from './signup/signup.component';\nimport {AuthGuardService} from './service/auth-guard.service';\nimport {ChatMobileComponent} from './chat-mobile/chat-mobile.component';\nimport {LoggedInGuardService} from './service/loggedIn-guard.service';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/chat', pathMatch: 'full' },\n  { path: 'login', component: LoginComponent, canActivate: [LoggedInGuardService] },\n  { path: 'signup', component: SignupComponent, canActivate: [LoggedInGuardService] },\n  { path: 'chat', component: ChatMobileComponent, canActivate: [AuthGuardService] }\n];\n\n@NgModule({\n  declarations: [],\n  imports: [\n    RouterModule.forRoot(routes, { useHash: true })\n  ],\n  exports: [\n    RouterModule\n  ]\n})\nexport class AppRoutingModule { }\n","import {Component, OnInit} from '@angular/core';\nimport {LoginRequest, ResponseStatus, SessionDetails} from '../chat-web-socket.service';\nimport {Router} from '@angular/router';\nimport {LoginService} from '../service/login.service';\nimport {SessionService} from '../service/session.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  hide = true;\n  loggingIn = false;\n  error = false;\n  errorMessage?: string;\n\n  constructor(private router: Router,\n              private loginService: LoginService,\n              private sessionService: SessionService) {}\n\n  ngOnInit(): void {\n  }\n\n  login(username: string, password: string): void {\n\n    this.loggingIn = true;\n    this.error = false;\n\n    const loginRequest: LoginRequest = {\n      username,\n      password,\n      userDeviceDetails: {\n        userIp: '10.198.10.2',\n        userAgent: window.navigator?.userAgent,\n        screenResolution: {\n          width: window.innerWidth?.toString(),\n          height: window.innerHeight?.toString(),\n          orientation: window.orientation?.toString()\n        }\n      }\n    };\n\n    this.loginService\n      .login(loginRequest)\n      .subscribe(loginResponse => {\n\n        this.loginService\n          .test()\n          .subscribe(result => {\n            console.log(result);\n          });\n\n        if (loginResponse.status === ResponseStatus.SUCCESS) {\n\n          const sessionDetails: SessionDetails = {\n            loggedIn: true,\n            token: loginResponse.token,\n            loggedInUser: loginResponse.user\n          };\n\n          this.sessionService.registerSession(sessionDetails);\n          this.router.navigate(['/chat']);\n\n        } else {\n          this.loggingIn = false;\n          this.errorMessage = this.getErrorMessage(loginResponse.status);\n          this.error = true;\n        }\n\n      });\n\n  }\n\n  signup(): void {\n    this.router.navigate(['/signup']);\n  }\n\n  private getErrorMessage(status: ResponseStatus): string {\n    switch (status) {\n      case ResponseStatus.INVALID_CREDENTIALS:\n        return 'Error: Invalid Credentials';\n      default:\n        return 'Sorry, It\\'s us. Try again..';\n    }\n  }\n\n}\n","<mat-card *ngIf=\"loggingIn\" class=\"card\">\n  <mat-card-content>\n    <p style=\"text-align: center\">Logging in</p>\n    <p>\n      <mat-spinner style=\"margin: auto\"></mat-spinner>\n    </p>\n  </mat-card-content>\n</mat-card>\n\n<mat-card *ngIf=\"!loggingIn\" class=\"card\">\n    <p style=\"text-align: center;\">Login</p>\n\n    <div *ngIf=\"error\" class=\"errorMessageBox\">\n      <p>{{errorMessage}}</p>\n    </div>\n\n    <mat-card-content>\n\n        <p>\n            <mat-form-field appearance=\"fill\" style=\"width: 100%;\">\n                <mat-label>Username</mat-label>\n                <input #usernameInput matInput matNativeControl placeholder=\"Type your username\">\n            </mat-form-field>\n\n            <mat-form-field appearance=\"fill\" style=\"width: 100%;\">\n                <mat-label>Password</mat-label>\n                <input #passwordInput matInput [type]=\"hide ? 'password' : 'text'\" placeholder=\"Type your password\">\n\n                <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\n                    <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                </button>\n            </mat-form-field>\n        </p>\n\n    </mat-card-content>\n    <mat-card-footer>\n        <p>\n            <button mat-raised-button color=\"primary\" (click)=\"login(usernameInput.value, passwordInput.value)\" style=\"margin-left: 20px;\">\n                Login\n            </button>\n            <button mat-raised-button color=\"accent\" (click)=\"signup()\" style=\"margin-left: 20px;\">\n              Sign up\n            </button>\n        </p>\n    </mat-card-footer>\n</mat-card>\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject, interval, Observable, Subject} from 'rxjs';\nimport {webSocket, WebSocketSubject} from 'rxjs/webSocket';\nimport {environment} from '../environments/environment';\n\nexport enum MessageType {\n  CONTACTS_LIST = 'CONTACTS_LIST',\n  CHAT_HISTORY = 'CHAT_HISTORY',\n  NEW_CONTACT_REGISTERED = 'NEW_CONTACT_REGISTERED',\n  USER_MESSAGE = 'USER_MESSAGE',\n  PING = 'PING',\n  PONG = 'PONG',\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  AUTHENTICATE = 'AUTHENTICATE',\n  REAUTHENTICATE = 'REAUTHENTICATE',\n  SIGNUP = 'SIGNUP',\n  LOGOFF = 'LOGOFF',\n  NOT_AUTHENTICATED = 'NOT_AUTHENTICATED',\n  NOT_AUTHORIZED = 'NOT_AUTHORIZED'\n}\n\nexport enum DestinationType {\n  USER = 'USER',\n  GROUP = 'GROUP',\n  ALL_USERS_GROUP = 'ALL_USERS_GROUP'\n}\n\nexport enum ContactType {\n  USER = 'USER',\n  GROUP = 'GROUP'\n}\n\nexport enum ResponseStatus {\n  SUCCESS = 'SUCCESS',\n  INVALID_CREDENTIALS = 'INVALID_CREDENTIALS',\n  INVALID_NAME = 'INVALID_NAME',\n  INVALID_USERNAME = 'INVALID_USERNAME',\n  INVALID_PASSWORD = 'INVALID_PASSWORD',\n  SERVER_ERROR = 'SERVER_ERROR',\n  USERNAME_IN_USE = 'USERNAME_IN_USE'\n}\n\nexport interface SessionDetails {\n  loggedIn: boolean;\n  token: string;\n  loggedInUser: any;\n}\n\nexport interface RequestMessage {\n  type: MessageType;\n  seqId?: number;\n  token?: string;\n  payload?: any;\n}\n\nexport interface ResponseMessage {\n  type: MessageType;\n  payload?: any;\n}\n\nexport enum MimeType {\n  TEXT = 'TEXT'\n}\n\nexport interface ChatMessage {\n  id?: string;\n  from?: string;\n  destinationType: DestinationType;\n  destinationId: string;\n  content: string;\n  mimeType: MimeType;\n  date?: Date;\n}\n\nexport interface ScreenResolution {\n  width: string;\n  height: string;\n  orientation: string;\n}\n\nexport interface UserDeviceDetails {\n  userIp: string;\n  userAgent: string;\n  screenResolution: ScreenResolution;\n}\n\nexport interface LoginRequest {\n  username: string;\n  password: string;\n  userDeviceDetails: UserDeviceDetails;\n}\n\nexport interface LoginResponse {\n  token: string;\n  user: User;\n  status: ResponseStatus;\n  message?: string;\n}\n\nexport interface SignupResponse {\n  token: string;\n  user: User;\n  status: ResponseStatus;\n}\n\nexport interface ChatHistoryRequest {\n  destinationId: string;\n  lastMessageId?: string;\n}\n\nexport interface ChatHistoryResponse {\n  destinationId: string;\n  chatHistory: Array<ChatMessage>;\n}\n\nexport interface User {\n  id: string;\n  name: string;\n  description: string;\n  contactType: ContactType;\n  avatar: string;\n}\n\nexport interface Contact {\n  id: string;\n  name: string;\n  description: string;\n  contactType: ContactType;\n  avatar: string;\n  chatHistoryLoaded: boolean;\n  chatHistory?: Array<ChatMessage>;\n}\n\nexport enum ChatConnectionStatus {\n  CONNECTING = 'Connecting...',\n  RECONNECTING = 'Reconnecting...',\n  ONLINE = 'Online',\n  OFFLINE = 'Offline'\n}\n\nexport const MOBILE_MAX_WIDTH = 450;\n\nconst pingMessage: RequestMessage = {\n  type: MessageType.PING\n};\n\nconst MAX_RECONNECTION_TRIES = 3;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatWebSocketService {\n\n  private chatServerWebSocket: WebSocketSubject<ResponseMessage>;\n  private chatServerWebSocketSubject: Subject<ResponseMessage>;\n  private connStatusSubject: BehaviorSubject<ChatConnectionStatus>;\n  private chatConnectionStatus: ChatConnectionStatus;\n  private reconnectionTries = 0;\n\n  constructor() {\n    this.connStatusSubject = new BehaviorSubject<ChatConnectionStatus>(ChatConnectionStatus.OFFLINE);\n    this.chatServerWebSocketSubject = new Subject<ResponseMessage>();\n  }\n\n  openWebSocketConnection(): Observable<any> {\n    this.updateConnectionStatus(ChatConnectionStatus.CONNECTING);\n\n    this.chatServerWebSocket = webSocket<ResponseMessage>({\n      url: `${environment.backendUrl}`\n      // protocol: ['mycookie', 'value']\n    });\n\n    this.listenWebSocketMessages();\n    return this.chatServerWebSocket;\n  }\n\n  openConnection(): Observable<void> {\n    return new Observable(subscriber => {\n      this.openWebSocketConnection()\n        .subscribe(connection => {\n          subscriber.complete();\n        },\n            error => {\n          subscriber.error('failed to open connection');\n        });\n    });\n  }\n\n  closeWebsocketConnection(): void {\n    this.chatServerWebSocket.complete();\n  }\n\n  resetConnection(): void {\n    this.closeWebsocketConnection();\n    this.openWebSocketConnection();\n  }\n\n  sendWebSocketMessage(message: RequestMessage): void {\n    this.chatServerWebSocket.next(message);\n  }\n\n  sendWebsocketMessage(message: RequestMessage): Observable<RequestMessage> {\n    return new Observable(subscriber => {\n      if (this.chatConnectionStatus !== ChatConnectionStatus.ONLINE) {\n        this.reconnectionTries = 0;\n        this.tryReconnectWebSocketConnection();\n        subscriber.error(new Error('Connection is closed.'));\n      } else {\n        this.chatServerWebSocket.next(message);\n        subscriber.next(message);\n        subscriber.complete();\n      }\n    });\n  }\n\n  getWebSocketObservable(): Observable<ResponseMessage> {\n    return this.chatServerWebSocketSubject;\n  }\n\n  getConnectionStatusSubject(): Observable<ChatConnectionStatus> {\n    return this.connStatusSubject;\n  }\n\n  private listenWebSocketMessages(): void {\n    this.chatServerWebSocket\n      .subscribe((responseMessage) => {\n        this.chatServerWebSocketSubject.next(responseMessage);\n        this.updateConnectionStatus(ChatConnectionStatus.ONLINE);\n        // },\n        // () => ''//this.tryReconnectWebSocketConnection()\n      });\n  }\n\n  private monitorConnection(): void {\n    interval(30000)\n      .subscribe(val => {\n        if (this.chatConnectionStatus === ChatConnectionStatus.OFFLINE) {\n          console.error('trying to reconnect');\n          this.reconnect();\n        } else {\n          this.chatServerWebSocket.next(pingMessage);\n        }\n      });\n  }\n\n  private tryReconnectWebSocketConnection(): void {\n    this.updateConnectionStatus(ChatConnectionStatus.OFFLINE);\n    if (this.reconnectionTries < MAX_RECONNECTION_TRIES) {\n      this.reconnectionTries = this.reconnectionTries + 1;\n      console.error(`trying to reconnect (${this.reconnectionTries}/${MAX_RECONNECTION_TRIES})`);\n      this.reconnect();\n    }\n  }\n\n  private reconnect(): void {\n    this.updateConnectionStatus(ChatConnectionStatus.RECONNECTING);\n    this.resetConnection();\n  }\n\n  private updateConnectionStatus(status: ChatConnectionStatus): void {\n    if (status === ChatConnectionStatus.OFFLINE) {\n      this.reconnectionTries = 0;\n    }\n    this.chatConnectionStatus = status;\n    this.connStatusSubject.next(this.chatConnectionStatus);\n  }\n\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}